pipeline {
    agent any

    parameters { 
        choice(name: 'OS', choices: ['windows', 'linux'], description: 'Please select an OS for the instance to be created') 
        choice(name: 'iSize', choices: ['small','big'], description: 'Please select an instance size')
        booleanParam(name: 'Refresh_Pipeline', description:'Refresh pipeline code')
    }

    stages {
        stage('Refresh Pipeline') {
            when { expression { params.Refresh_Pipeline == true }}
            steps {
                script{
                    currentBuild.result = 'ABORTED'
                    error("refreshing pipeline...")
                }
            }
        }
        stage('Initialize') {
            steps {
                echo 'initializing pipeline...'
                script{
                    echo "$params.OS"
                    echo "${params.iSize}"
                    def instance_type = [${params.OS},${params.iSize}].join('-')
                    //println("The machine ${instance_type} is initializing..")
                    // echo "[${params.OS},${params.iSize}].join('-') joint"
                }
            }
        }
        // stage('Taking Actions') {
        //     steps {
        //         script{
        //             sh 'echo $PATH '
        //             withAWS(credentials:'aws-key') {
        //                 //sh 'aws iam get-user'
        //                 //sh 'aws ec2 describe-regions --region eu-central-1'                 
        //                 def instance_details = sh (
        //                 script: 
        //                     """
        //                     aws ec2 run-instances \
        //                     --image-id ami-06c39ed6b42908a36 \
        //                     --instance-type t2.micro \
        //                     --key-name AWS_learning \
        //                     --region eu-central-1
        //                 """,
        //                 returnStdout: true
        //             ).trim()

        //             def template = readFile(file : 'Configs/AWStemplates.json')

        //             def json = readJSON text: template 
        //             instance_id = json ["Instances"][0]["InstanceId"]
                    
        //             }
        //         }
        //     }
        // }
    }
}
